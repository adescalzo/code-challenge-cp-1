# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = lf

[*.md]
max_line_length = off
trim_trailing_whitespace = false

[*.{json,json5}]
indent_size = 2

[*.{yml,yaml}]
indent_size = 2

# Dotnet

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case

# Instance fields are camelCase
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Parentheses preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# CSharp code style settings:
[*.cs]
# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:error
csharp_style_var_when_type_is_apparent = true:error
csharp_style_var_elsewhere = true:error

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:suggestion

# Spacing
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Make field readonly
# GES: mongo driver cannot map to readonly fields
# this needs to be changed back to be a warning and specific occurrences should be whitelisted/ignored
dotnet_diagnostic.IDE0044.severity = suggestion

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# CONSIDER: Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?
# IDE0051: Remove unused private member
dotnet_diagnostic.IDE0051.severity = suggestion

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = suggestion

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = suggestion

# CA2255: The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = suggestion

# IDE0005: Using directive is unnecessary
# Set to suggestion - unnecessary usings will be cleaned up incrementally
dotnet_diagnostic.IDE0005.severity = suggestion

# dotnet_style_allow_multiple_blank_lines_experimental
dotnet_diagnostic.IDE2000.severity = warning

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

# CA1031: Do not catch general exception types
# Set to suggestion instead of error - catching Exception is sometimes necessary
dotnet_diagnostic.CA1031.severity = suggestion

# CA1032: Implement standard exception constructors
# Set to suggestion - can be addressed incrementally in Infrastructure
dotnet_diagnostic.CA1032.severity = suggestion

# CA1054: URI parameters should not be strings
# Set to suggestion - sync payloads use strings for JSON serialization simplicity
dotnet_diagnostic.CA1054.severity = suggestion

# CA1056: URI properties should not be strings
# Set to suggestion - sync payloads use strings for JSON serialization simplicity
dotnet_diagnostic.CA1056.severity = suggestion

# CA1720: Identifier contains type name
# Set to suggestion - some external APIs require matching their naming
dotnet_diagnostic.CA1720.severity = suggestion

# CA1819: Properties should not return arrays
# Set to suggestion - some DTOs use arrays for performance
dotnet_diagnostic.CA1819.severity = suggestion

# CS1591: Missing XML comment for publicly visible type or member
# Set to none - documentation is generated but missing comments don't block build
dotnet_diagnostic.CS1591.severity = none

# CA1707
dotnet_diagnostic.CA1707.severity = suggestion

# CS2326: Type parameter has the same name as the type parameter from outer type
# Set to none - disabled
dotnet_diagnostic.CS2326.severity = none

# S4830: Server certificate validation should be enabled
# Set to suggestion - disabled for development environments only
dotnet_diagnostic.S4830.severity = suggestion

# CA1852: Seal internal types
# Set to suggestion - types can be sealed for performance but not required
dotnet_diagnostic.CA1852.severity = suggestion

# CA1812: Avoid uninstantiated internal classes
# Set to none - classes are instantiated via dependency injection
dotnet_diagnostic.CA1812.severity = none

# CA1727: Use PascalCase for named placeholders
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1727.severity = suggestion

# CA1848: Use LoggerMessage delegates
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1848.severity = suggestion

# CA2007: ConfigureAwait
# Set to suggestion - library code should use ConfigureAwait but not critical for apps
dotnet_diagnostic.CA2007.severity = suggestion

# CA1515: Make types internal
# Set to suggestion - application types should be internal but not blocking
dotnet_diagnostic.CA1515.severity = suggestion

# CA2000: Dispose object
# Set to suggestion - dispose patterns can be improved incrementally
dotnet_diagnostic.CA2000.severity = suggestion

# CA2249: Use String.Contains instead of String.IndexOf
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA2249.severity = suggestion

# CA1310: Specify StringComparison for clarity
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1310.severity = suggestion

# CA2234: Pass Uri instead of string to HttpClient
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA2234.severity = suggestion

# CA1307: Specify StringComparison for string.IndexOf
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1307.severity = suggestion

# CA1304: Specify CultureInfo
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1304.severity = suggestion

# CA1305: Specify IFormatProvider
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1305.severity = suggestion

# CA1309: Use ordinal string comparison
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1309.severity = suggestion

# CA1311: Specify culture or use invariant
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1311.severity = suggestion

# CA1514: Avoid redundant length calculation
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1514.severity = suggestion

# CA1860: Prefer Count > 0 to Any()
# Set to suggestion - can be improved incrementally
dotnet_diagnostic.CA1860.severity = suggestion

# CA1062: Validate parameter is non-null
# Set to suggestion - auto-generated migrations don't have null checks
dotnet_diagnostic.CA1062.severity = suggestion

# CA2263: Prefer generic overload
# Set to none - using typeof() with non-generic overloads is necessary for dynamic type registration in DI
dotnet_diagnostic.CA2263.severity = none

# IDE0052: Remove unread private member
# Set to suggestion - some fields are used through reflection or DI
dotnet_diagnostic.IDE0052.severity = suggestion

# SonarAnalyzer rules - set to suggestion for incremental improvement
dotnet_diagnostic.S4487.severity = suggestion
dotnet_diagnostic.S3881.severity = suggestion
dotnet_diagnostic.S1186.severity = suggestion
dotnet_diagnostic.S2971.severity = suggestion
dotnet_diagnostic.S6607.severity = suggestion
dotnet_diagnostic.S927.severity = suggestion
dotnet_diagnostic.S4581.severity = suggestion
dotnet_diagnostic.S2139.severity = suggestion
dotnet_diagnostic.S1854.severity = suggestion
dotnet_diagnostic.S2325.severity = suggestion
dotnet_diagnostic.S6678.severity = suggestion

dotnet_diagnostic.S2326.severity = none

# S1135: TODO comments
# severity = suggestion → Visible in Rider as gray underline, shows in Problems panel, doesn't block build
# This helps you track TODOs without blocking development
dotnet_diagnostic.S1135.severity = suggestion

# S125: Commented out code
# IMPORTANT: Choose one of the following based on your preference:
#
# severity = warning  → Rider shows it with yellow/orange underline, but BLOCKS BUILD due to CodeAnalysisTreatWarningsAsErrors=true in Directory.Build.props
# severity = suggestion → Rider shows it with gray dots/underline, DOES NOT BLOCK BUILD, but still visible in IDE
# severity = none → Completely ignored, won't show in Rider at all
#
# Recommendation: Use 'suggestion' to see it in Rider without blocking builds
# If you want to block builds with commented code, use 'warning' and remove the commented code
dotnet_diagnostic.S125.severity = suggestion

# S1172: Unused parameters
# severity = warning → Blocks build if parameters are declared but not used
# Recommendation: Prefix intentionally unused parameters with _ (e.g., _cancellationToken)
dotnet_diagnostic.S1172.severity = warning

# CA1040: Avoid empty interfaces
# Set to none - marker interfaces are intentional (ICommand, IQuery for CQRS pattern)
dotnet_diagnostic.CA1040.severity = none

# CA1716: Identifiers should not match keywords
# Set to suggestion - some domain models may have names that conflict with keywords
dotnet_diagnostic.CA1716.severity = suggestion

# Exclude generated code from analysis
[**/Migrations/**/*.cs]
generated_code = true
dotnet_diagnostic.CA1062.severity = none

[**/obj/**]
generated_code = true

[**/bin/**]
generated_code = true
